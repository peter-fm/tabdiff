name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}-${{ matrix.variant }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            variant: bundled
            name: tabdiff-windows-x64-bundled.exe
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            variant: unbundled
            name: tabdiff-windows-x64.exe
            
          - target: x86_64-apple-darwin
            os: macos-latest
            variant: bundled
            name: tabdiff-macos-x64-bundled
            
          - target: x86_64-apple-darwin
            os: macos-latest
            variant: unbundled
            name: tabdiff-macos-x64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            variant: bundled
            name: tabdiff-macos-arm64-bundled
            
          - target: aarch64-apple-darwin
            os: macos-latest
            variant: unbundled
            name: tabdiff-macos-arm64
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            variant: bundled
            name: tabdiff-linux-x64-bundled
            
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            variant: unbundled
            name: tabdiff-linux-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install DuckDB (Ubuntu x86_64 - unbundled)
        if: matrix.os == 'ubuntu-latest' && matrix.variant == 'unbundled'
        run: |
          sudo apt-get update
          wget https://github.com/duckdb/duckdb/releases/latest/download/libduckdb-linux-amd64.zip
          unzip libduckdb-linux-amd64.zip
          sudo cp libduckdb.so /usr/local/lib/
          sudo cp duckdb.h /usr/local/include/
          sudo ldconfig
          # Verify installation
          ls -la /usr/local/lib/libduckdb.so
          echo "PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install DuckDB (macOS - unbundled)
        if: matrix.os == 'macos-latest' && matrix.variant == 'unbundled'
        run: |
          brew install duckdb
          # Verify installation
          ls -la $(brew --prefix)/lib/libduckdb.dylib
          echo "DYLD_LIBRARY_PATH=$(brew --prefix)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV

      - name: Install DuckDB (Windows - unbundled)
        if: matrix.os == 'windows-latest' && matrix.variant == 'unbundled'
        run: |
          curl -L -o duckdb.zip https://github.com/duckdb/duckdb/releases/latest/download/libduckdb-windows-amd64.zip
          7z x duckdb.zip
          mkdir -p "C:\Program Files\DuckDB\lib"
          mkdir -p "C:\Program Files\DuckDB\include"
          copy duckdb.dll "C:\Program Files\DuckDB\lib\"
          copy duckdb.lib "C:\Program Files\DuckDB\lib\"
          copy duckdb.h "C:\Program Files\DuckDB\include\"
          echo "DUCKDB_LIB_PATH=C:\Program Files\DuckDB\lib" >> $GITHUB_ENV


      - name: Build (bundled)
        if: matrix.variant == 'bundled'
        run: cargo build --release --target ${{ matrix.target }} --features bundled

      - name: Build (unbundled)
        if: matrix.variant == 'unbundled'
        shell: bash
        run: |
          echo "Building unbundled version for ${{ matrix.target }}"
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            export DUCKDB_LIB_PATH="$(brew --prefix)/lib"
            echo "macOS: DUCKDB_LIB_PATH=$DUCKDB_LIB_PATH"
            ls -la "$DUCKDB_LIB_PATH"/libduckdb.* || echo "DuckDB library not found in $DUCKDB_LIB_PATH"
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            export DUCKDB_LIB_PATH="C:/Program Files/DuckDB/lib"
            echo "Windows: DUCKDB_LIB_PATH=$DUCKDB_LIB_PATH"
            ls -la "$DUCKDB_LIB_PATH"/duckdb.* || echo "DuckDB library not found in $DUCKDB_LIB_PATH"
          else
            export DUCKDB_LIB_PATH="/usr/local/lib"
            echo "Linux: DUCKDB_LIB_PATH=$DUCKDB_LIB_PATH"
            ls -la "$DUCKDB_LIB_PATH"/libduckdb.* || echo "DuckDB library not found in $DUCKDB_LIB_PATH"
          fi
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Rename binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\tabdiff.exe ${{ matrix.name }}

      - name: Rename binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/tabdiff ${{ matrix.name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ matrix.name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/tabdiff-*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}